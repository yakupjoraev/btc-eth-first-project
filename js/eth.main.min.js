
const UNIXSTART = new Date(Date.now());

// статик адрес
const BTC_ADDRESS = '0x19431...';

// скок штук сгенерировать при загрузке
const GENERATE_FROM_START_AMOUNT = 1;

// скок времени в секундах между каждыми генерируемыми ячейками
// при загрузке страницы
const CELLS_TIMESTAMP_GAP = 60;

// массив всех ячеек
const TABLECELLS_ARR = [];

// задает максимальное отображаемое кол-во ячеек
// 0 или -1 для бесконечного кол-ва ячеек
const TABLECELLS_MAX = 15;

// задержка в МС перед каждым новым появлением ячейки
const TABLECELLS_SPAWN_LOOP_DELAY_MIN = 3000;
const TABLECELLS_SPAWN_LOOP_DELAY_MAX = 6000;

const TRANS_AMOUNT_DEFAULT = 381849;
let TRANS_AMOUNT = parseInt(localStorage.getItem("transAmount") || TRANS_AMOUNT_DEFAULT);
let TRANS_DOM = null;

moment().format('LTS'); 
moment.relativeTimeThreshold('ss', 3);

const fREMOVE_IF_EXCEED = () => {
    if (TABLECELLS_MAX <= 0){
        return;
    }
    
    if (TABLECELLS_ARR.length >= TABLECELLS_MAX){
        fCUT_LAST_TABLECELL();
    }
}

const fCUT_LAST_TABLECELL = () => {
    TABLECELLS_ARR.at(0)?.remove();
    TABLECELLS_ARR.shift();
}

const fTABLECELL_LOOP = () => {
    console.log("TABLELOOP");
    new TableRecord().render();
    document.dispatchEvent(new Event("updateCell"));

    setTimeout(() => {fTABLECELL_LOOP()},
     randomInteger(TABLECELLS_SPAWN_LOOP_DELAY_MIN, TABLECELLS_SPAWN_LOOP_DELAY_MAX));
}

const fSET_TRANS_DOM = (amount = 0) => {
    if (TRANS_AMOUNT >= 999999){
        TRANS_AMOUNT = TRANS_AMOUNT_DEFAULT;
    }
    TRANS_AMOUNT += amount;
    localStorage.setItem("transAmount", TRANS_AMOUNT);
    /* TRANS_DOM.innerHTML = (TRANS_AMOUNT).toLocaleString("en-US", { minimumFractionDigits: 0 }); */
}; 


function animateValue(obj, start, end, duration) {
    let startTimestamp = null;
    const step = (timestamp) => {
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
      obj.innerHTML = Math.floor(progress * (end - start) + start).toLocaleString("en-US", { minimumFractionDigits: 0 });;
      if (progress < 1) {
        window.requestAnimationFrame(step);
      }
    };
    window.requestAnimationFrame(step);
  }
  
  

$(function(){

    $('a[href^="#"').on('click', function() {
        let href = $(this).attr('href');
        $('html, body').animate({
            scrollTop: ($(href).offset().top - 100)
        },{
            duration: 1000
        });
    return false;
    });

    TRANS_DOM = $("#trans_amount")[0];
    
    fSET_TRANS_DOM();
    animateValue(TRANS_DOM, 0, TRANS_AMOUNT, 3000);

    setTimeout(() => {
        for (let index = GENERATE_FROM_START_AMOUNT; index > 0; index--) {
            new TableRecord(index * CELLS_TIMESTAMP_GAP).render();
        }
    
        fTABLECELL_LOOP();
    }, 5000);

});

function copytext(el) {
    var $tmp = $("<textarea>");
    $("body").append($tmp);
    $tmp.val($(el).text().trim()).select();
    document.execCommand("copy");
    $tmp.remove();
}

function makeid(length, chars = null) {
    var result           = '';
    var characters       = chars || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for ( var i = 0; i < length; i++ ) {
        result += characters.charAt(Math.floor(Math.random() * 
        charactersLength));
    }
    return result;
}

function randomInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

const generateTXHash = () => makeid(10) + "...";
const generateBlock = () => randomInteger(100000, 999999);
const generateAddress = () => `0x${makeid(5)}...`;
const generatePayment = () => {
    const base = randomInteger(1, 15);
    return [base, base * 2, parseFloat(`0.000${randomInteger(5, 100)}`)];
};

class TableCell{
    constructor(content, dataCell){
        this.Content = content;
        this.DataCell = dataCell;
    }

    render(content = null){
        if (content != null){
            this.Content = content;
        }

        return `<td data-label=${this.DataCell}>${this.Content.toString()}</td>`;
    }
}

class TableRecord{
    constructor(offset_seconds = 0){
        fREMOVE_IF_EXCEED();

        this.TXHASH = new TableCell(generateTXHash(), "TxHash");
        this.Block = new TableCell(generateBlock(), "Block");

        this.Address = generateAddress();
        this.Address2 = generateAddress();
        this.From = [this.Address, BTC_ADDRESS];
        this.To = [BTC_ADDRESS, this.Address];
        this.FromCell = new TableCell(`${this.From[0]}<br>${this.From[1]}`, "From");
        this.ToCell = new TableCell(`${this.To[0]}<br>${this.To[1]}`, "To");

        this.Value = generatePayment();
        this.ValueCell = new TableCell(`${this.Value[0]} ETH<br>${this.Value[1]} ETH`, "Value");
        this.FeeCell = new TableCell(this.Value[2], "Fee");

        animateValue(TRANS_DOM, TRANS_AMOUNT, TRANS_AMOUNT + this.Value[1], 1000);
        fSET_TRANS_DOM(this.Value[1]);

        this.Age = new Date(Date.now() - (offset_seconds * 1000));

        this.TableBody = $(`#table_body`)[0];
        
        this.DOM = null;
        this.AgeDOM = null;
        this.Removed = false;
    }

    getAge(){
        return moment(this.Age).fromNow();
    }

    updateAge(){
        if (!(this.AgeDOM) || !(this.DOM)){
            return;
        }
        console.log("update age");
        return this.AgeDOM[0].innerHTML = this.getAge();
    }

    renderCells(){
        return `
            ${this.TXHASH.render()}
            ${this.Block.render()}
            ${this.FromCell.render()}
            ${this.ToCell.render()}
            ${this.ValueCell.render()}
            ${this.FeeCell.render()}
            <td class="age_cell" data-label="Age">${this.getAge()}</td>
            <td data-label="Status">done</td>
        `;
    }

    remove(){
        console.log("remove");
        
        if (!(this.DOM)){
            return;
        }
        console.log(this.DOM[0]);
        console.log("remove succ");
        this.Removed = true;
        this.TableBody.removeChild(this.DOM[0]);
        this.DOM = null;
    }

    render(){
        let div = document.createElement('tr');
        div.className = "table__text";
        div.innerHTML = this.renderCells();

        this.DOM = $(div);
        this.AgeDOM = this.DOM.find(".age_cell");
        this.TableBody.prepend(div);

        document.addEventListener("updateCell", () => this.updateAge());
        TABLECELLS_ARR.push(this);
        return div;
    }
}